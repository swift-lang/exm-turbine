/*
 * Copyright 2013 University of Chicago and Argonne National Laboratory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/*
  BLOB.H

  Binary Large OBjects

  The Tcl bindings for all this are generated by SWIG
*/

#ifndef BLOB_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

/**
   Simple struct for variable-length data blob

   Based on this struct, SWIG will generate the following
   Tcl functions:

   new_turbine_blob()    -> turbine_blob*
   delete_turbine_blob(turbine_blob*) -> void
   turbine_blob_pointer_set(turbine_blob*, void*) -> void
   turbine_blob_pointer_get(turbine_blob*) -> void*
   turbine_blob_length_set(turbine_blob*, int) -> void
   turbine_blob_length_get(turbine_blob*) -> int
*/
typedef struct
{
  void* pointer;
  int length;
} turbine_blob;

/**
   @param pointer An int representation of a void*
 */
turbine_blob* blobutils_create(long pointer, int length);

turbine_blob* blobutils_create_ptr(void* pointer, int length);

/**
   Allocate memory (not a blob) of given size
 */
void* blobutils_malloc(size_t bytes);

/**
   Deallocate a blob - frees the data pointer
 */
void blobutils_destroy(turbine_blob* blob);

void* blobutils_ptr_add(void* p, int offset);

/**
   Obtain sizeof(void*)
 */
int blobutils_sizeof_ptr(void);

/**
   Obtain sizeof(int)
 */
int blobutils_sizeof_int(void);

int blobutils_sizeof_int32(void);

/**
   Obtain sizeof(double) (In Swift/T, all floats are 64-bit)
 */
int blobutils_sizeof_float(void);

/*
   Cast functions for simple SWIG type transformation
   Not all possible type pairs are yet implemented
   If not given, void* is assumed
 */
void* blobutils_cast_to_ptr(int i);

void** blobutils_cast_ptr_to_ptrptr(void* p);
char** blobutils_cast_ptr_to_char_ptrptr(void* p);

void* blobutils_cast_string_to_ptr(char* s);

int  blobutils_cast_to_int(void* p);
long blobutils_cast_to_long(void* p);

      int*    blobutils_cast_int_to_int_ptr      (int i);
const int*    blobutils_cast_int_to_const_int_ptr(int i);
      double* blobutils_cast_int_to_dbl_ptr      (int i);
const double* blobutils_cast_int_to_const_dbl_ptr(int i);

int* blobutils_cast_to_int_ptr(void* p);
int64_t* blobutils_cast_to_int64_ptr(void* p);
int32_t* blobutils_cast_to_int32_ptr(void* p);
double*  blobutils_cast_to_dbl_ptr(void* p);

/**
   Set all entries to 0.0
 */
void blobutils_zeroes_float(double* p, int n);

/**
   Assume blob is array of void*- do array lookup
 */
void* blobutils_get_ptr(void** pointer, int index);

/**
   Assume blob is array of void*- do array store
 */
void blobutils_set_ptr(void** pointer, int index, void* p);

/**
   Assume blob is array of double- do array lookup
 */
double blobutils_get_float(double* pointer, int index);

/**
   Assume blob is array of double- do array store
 */
void blobutils_set_float(double* p, int i, double d);

/**
   Assume blob is array of int- do array lookup
 */
int blobutils_get_int(int* pointer, int index);

/**
   Assume blob is array of int32- do array lookup
 */
int32_t blobutils_get_int32(int32_t* pointer, int index);

/**
   Assume blob is array of int- do array lookup
 */
void blobutils_set_int(int* pointer, int index, int i);

/**
   Assume blob is array of char- do array lookup
 */
char blobutils_get_char(turbine_blob* blob, int index);

turbine_blob* blobutils_make_test(void);

bool blobutils_write(const char* output, turbine_blob* blob);

bool blobutils_read(const char* input, turbine_blob* blob);

/**
   Called by the user when using turbine_run() to return
   output data to the calling code
 */
void blobutils_turbine_run_output_blob(ptrdiff_t output,
                                       ptrdiff_t p, int length);

#endif
