/*
 * Copyright 2013 University of Chicago and Argonne National Laboratory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
  Alternative launcher program that can be used in place of tclsh
  to launch a Tcl script.  Avoids need to dynamically load libraries.

  Tim Armstrong - Dec 11 2013
 */


#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#include "src/turbine/turbine.h"
#include "src/tcl/turbine/tcl-turbine.h"
#include "src/tcl/static-pkg/static-pkg.h"

@USER_HEADERS@

static const bool has_main_string = @HAS_MAIN_SCRIPT_STRING@;
static const char @MAIN_SCRIPT_STRING@[];

@RESOURCE_DECLS@

// E.g. code similar to Tclturbine_InitStatic to load lib and src
@USER_PKG_INIT@

int
main(int argc, char **argv)
{
  // Make packages available to all interpreters
  register_tcl_turbine_static_pkg();

  // E.g. Tcl_StaticPackage(NULL, "turbine", UserLib_InitStatic, UserLib_InitStatic);
  @TCL_STATIC_PKG_CALLS@

  turbine_code rc;
  char *script_file = NULL;
  if (has_main_string)
  {
    rc = turbine_run_string(MPI_COMM_NULL, @MAIN_SCRIPT_STRING@, argc, argv, NULL, NULL);
  }
  else
  {
    // Get script from first argument
    script_file = argv[1];

    // Pass remaining arguments minus script to turbine_run
    for (int i = 1; i < argc - 1; i++)
    {
      argv[i] = argv[i+1];
    }
    argc--;
    rc = turbine_run(MPI_COMM_NULL, script_file, argc, argv, NULL);
  }

  if (rc == TURBINE_SUCCESS)
  {
    return 0;
  }
  else
  {
    char code_name[TURBINE_CODE_STRING_MAX];
    turbine_code_tostring(code_name, rc);
    if (script_file != NULL)
    {
      fprintf(stderr, "Error executing script file %s: turbine error "
                      "%s (%i)\n", script_file, code_name, rc);
    } else {
      fprintf(stderr, "Error executing script: turbine error "
                      "%s (%i)\n", code_name, rc);
    }
    return 2;
  }
}

// Binary data for Tcl main script
@MAIN_SCRIPT_DATA@

// Binary data for resources
@RESOURCE_DATA@
